{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is the Home of your awesome python projects' Documentation. Projects \u00b6 Example Project - Super project Customization \u00b6 This page can be customized as you want! See /path_to_your_documentation/docs/index.md Danger You should always keep a # Projects section and this file should be called index.md","title":"Home"},{"location":"#projects","text":"Example Project - Super project","title":"Projects"},{"location":"#customization","text":"This page can be customized as you want! See /path_to_your_documentation/docs/index.md Danger You should always keep a # Projects section and this file should be called index.md","title":"Customization"},{"location":"help/How_To_Use_Mkinx/","text":"How to use mkinx \u00b6 This Documentation has 2 layers: Each Python Project listed in your Home's Projects section has its own documentation, independantly generated via Sphinx , especially thanks to autodoc which generates documentation from docstrings in the source code On top of these Project Documentations is the present Home Documentation which you are reading. It is generated by Mkdocs and is used to explore projects and store general, shared Documentation accross projects How to Use \u00b6 mkdocs \u00b6 mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. Important index.md has to have a section \"# Projects\" Adding a new project to the list \u00b6 Manually \u00b6 To list a new project in the Projects section: Add it at the root of this Home Documentation (where docs/ and mkdocs.yml are) Mention it in this file's ( index.md ) Projects section as follows: * [ My Project ]( / my_awesome_project ) - My Project ' s short description ` Important mkinx expects to find a folder named build/ in your project, and will serve build/index.html . Note my_awesome_project is the name of the folder your project is in, and the / is mandatory Automatically add a python project \u00b6 mkinx comes with a handy autodoc feature to: create a new sphinx documentation reference your docstrings with sphinx apidoc add the project to your Home Documentation You may now edit the .rst files. See Write Sphinx Documentation Example \u00b6 Say you have this file structure: mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. project1/ ... # an existing project's documentation and say you want to add project2 to your list. You just have to create a new directory, put your code in there and run mkinx autodoc : # from your documentation's root $ mkdir project2 $ cd project 2 $ cp -r path/to/project2 ./ $ pwd path/to/your/documentation/project2 $ ls project2 $ mkinx autodoc ... some prints $ ls Makefile source build project2 now your file structure looks like: mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. project1/ ... # an existing project's documentation project2/ project2/ # your documented code here ... source/ # the source documents for sphinx to build your doc index.rst # rst files hold the code documentation's skeletton conf.py # sphinx configuration file ... build/ # the built docs, in html index.html ... Makefile # sphinx's make instructions; mkinx runs make html Now you can check your Home Documentation's Projects section, it will be there! Built-in Server \u00b6 Running mkinx serve will start a local http server for you to browse your documentation. If you don't want to use the default port ( 8443 ), use the serve_port flag: mkinx serve -s 7777 Changes mkinx tracks changes and modifications to .md , .rst and .py files: it will automatically trigger a build to update the html files. Sweet! Building the Documentations \u00b6 If you want to trigger a build manually, run mkinx build with some flags: usage : mkinx [- h ] [-- version ] [- v ] [- A ] [- F ] [- o ] [- p [ PROJECTS [ PROJECTS ...]]] [- m [ MOCK_IMPORTS [ MOCK_IMPORTS ...]]] [- s [ SERVE_PORT ]] [-- offline ] [{ init , build , serve , version , clean , autodoc }] [ project_name ] Building Doc positional arguments : { init , build , serve , version , clean , autodoc } Available commands for mkinx project_name [ init ] Your project 's name optional arguments: -h, --help show this help message and exit --version Print mkinx' s version - v , -- verbose [ build ] verbose flag ( Sphinx will stay verbose ) - A , -- all [ build ] Build doc for all projects - F , -- force [ build ] force the build , no verification asked - o , -- only_index [ build ] only build projects listed in the Documentation 's Home -p [PROJECTS [PROJECTS ...]], --projects [PROJECTS [PROJECTS ...]] [build] list of projects to build -m [MOCK_IMPORTS [MOCK_IMPORTS ...]], --mock_imports [MOCK_IMPORTS [MOCK_IMPORTS ...]] [autodoc] list of imports to mock -s [SERVE_PORT], --serve_port [SERVE_PORT] [serve] the server' s port , defaults to 8443 -- offline [ build , serve ] Whether references to external APIs should be deleted from html files + load material icons locally mkinx build does 3 things: Build your projects' documentations by running make html in the relevant projects (according to the listed projects if you use -p or -A flags) Update your projects' documentations' html files to add a link back here to the Home Documentation Build mkdoc 's home documentation, i.e. this very document and others as parametrized in mkdocs.yml A couple examples: To build a new project's documentation but leave others untouched: mkinx build -p my_awesome_project To build documentations for all projects which are listed in Projects : mkinx build -A -o There may be projects not listed above for any reason and you may not want to build their documentation, hence the -o flag Configuration \u00b6 Home Documentation: mkdocs \u00b6 Explore the mkdocs.yml file to configure your Home Documentation. Here are the keys: site_name:The name you want to give to this Home Documentation . By default pages will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs directory and its sub-directories. If you want to specify them yourself, add a key pages: (list of the pages available, listed on the sidebar) items in this list are - page's title: file.md theme: material you can also use readthedocs or install any other markdown_extensions: is a list of extensions to use. they are listed here - admonition allows for reStructuredText-style admonition, that is the \"important\", \"note\" and \"danger\" colored boxes Useful Resources \u00b6 Mkdocs's Getting Started Material for Mkdocs's customization instructions Material for Mkdocs's supported extensions list Projects' Documentations: sphinx \u00b6 In all python projects' source/ directory are the source files for sphinx to generate your documentation. As for the Home Documentation you should explore the conf.py file in this source directory to set this particular project's configuration.","title":"How To Use Mkinx"},{"location":"help/How_To_Use_Mkinx/#how-to-use-mkinx","text":"This Documentation has 2 layers: Each Python Project listed in your Home's Projects section has its own documentation, independantly generated via Sphinx , especially thanks to autodoc which generates documentation from docstrings in the source code On top of these Project Documentations is the present Home Documentation which you are reading. It is generated by Mkdocs and is used to explore projects and store general, shared Documentation accross projects","title":"How to use mkinx"},{"location":"help/How_To_Use_Mkinx/#how-to-use","text":"","title":"How to Use"},{"location":"help/How_To_Use_Mkinx/#mkdocs","text":"mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. Important index.md has to have a section \"# Projects\"","title":"mkdocs"},{"location":"help/How_To_Use_Mkinx/#adding-a-new-project-to-the-list","text":"","title":"Adding a new project to the list"},{"location":"help/How_To_Use_Mkinx/#manually","text":"To list a new project in the Projects section: Add it at the root of this Home Documentation (where docs/ and mkdocs.yml are) Mention it in this file's ( index.md ) Projects section as follows: * [ My Project ]( / my_awesome_project ) - My Project ' s short description ` Important mkinx expects to find a folder named build/ in your project, and will serve build/index.html . Note my_awesome_project is the name of the folder your project is in, and the / is mandatory","title":"Manually"},{"location":"help/How_To_Use_Mkinx/#automatically-add-a-python-project","text":"mkinx comes with a handy autodoc feature to: create a new sphinx documentation reference your docstrings with sphinx apidoc add the project to your Home Documentation You may now edit the .rst files. See Write Sphinx Documentation","title":"Automatically add a python project"},{"location":"help/How_To_Use_Mkinx/#example","text":"Say you have this file structure: mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. project1/ ... # an existing project's documentation and say you want to add project2 to your list. You just have to create a new directory, put your code in there and run mkinx autodoc : # from your documentation's root $ mkdir project2 $ cd project 2 $ cp -r path/to/project2 ./ $ pwd path/to/your/documentation/project2 $ ls project2 $ mkinx autodoc ... some prints $ ls Makefile source build project2 now your file structure looks like: mkdocs.yml # The configuration file for mkdocs. docs/ index.md # The documentation homepage (this one). ... # Other markdown pages, images and other files. Standard mkdocs. project1/ ... # an existing project's documentation project2/ project2/ # your documented code here ... source/ # the source documents for sphinx to build your doc index.rst # rst files hold the code documentation's skeletton conf.py # sphinx configuration file ... build/ # the built docs, in html index.html ... Makefile # sphinx's make instructions; mkinx runs make html Now you can check your Home Documentation's Projects section, it will be there!","title":"Example"},{"location":"help/How_To_Use_Mkinx/#built-in-server","text":"Running mkinx serve will start a local http server for you to browse your documentation. If you don't want to use the default port ( 8443 ), use the serve_port flag: mkinx serve -s 7777 Changes mkinx tracks changes and modifications to .md , .rst and .py files: it will automatically trigger a build to update the html files. Sweet!","title":"Built-in Server"},{"location":"help/How_To_Use_Mkinx/#building-the-documentations","text":"If you want to trigger a build manually, run mkinx build with some flags: usage : mkinx [- h ] [-- version ] [- v ] [- A ] [- F ] [- o ] [- p [ PROJECTS [ PROJECTS ...]]] [- m [ MOCK_IMPORTS [ MOCK_IMPORTS ...]]] [- s [ SERVE_PORT ]] [-- offline ] [{ init , build , serve , version , clean , autodoc }] [ project_name ] Building Doc positional arguments : { init , build , serve , version , clean , autodoc } Available commands for mkinx project_name [ init ] Your project 's name optional arguments: -h, --help show this help message and exit --version Print mkinx' s version - v , -- verbose [ build ] verbose flag ( Sphinx will stay verbose ) - A , -- all [ build ] Build doc for all projects - F , -- force [ build ] force the build , no verification asked - o , -- only_index [ build ] only build projects listed in the Documentation 's Home -p [PROJECTS [PROJECTS ...]], --projects [PROJECTS [PROJECTS ...]] [build] list of projects to build -m [MOCK_IMPORTS [MOCK_IMPORTS ...]], --mock_imports [MOCK_IMPORTS [MOCK_IMPORTS ...]] [autodoc] list of imports to mock -s [SERVE_PORT], --serve_port [SERVE_PORT] [serve] the server' s port , defaults to 8443 -- offline [ build , serve ] Whether references to external APIs should be deleted from html files + load material icons locally mkinx build does 3 things: Build your projects' documentations by running make html in the relevant projects (according to the listed projects if you use -p or -A flags) Update your projects' documentations' html files to add a link back here to the Home Documentation Build mkdoc 's home documentation, i.e. this very document and others as parametrized in mkdocs.yml A couple examples: To build a new project's documentation but leave others untouched: mkinx build -p my_awesome_project To build documentations for all projects which are listed in Projects : mkinx build -A -o There may be projects not listed above for any reason and you may not want to build their documentation, hence the -o flag","title":"Building the Documentations"},{"location":"help/How_To_Use_Mkinx/#configuration","text":"","title":"Configuration"},{"location":"help/How_To_Use_Mkinx/#home-documentation-mkdocs","text":"Explore the mkdocs.yml file to configure your Home Documentation. Here are the keys: site_name:The name you want to give to this Home Documentation . By default pages will contain an alphanumerically sorted, nested list of all the Markdown files found within the docs directory and its sub-directories. If you want to specify them yourself, add a key pages: (list of the pages available, listed on the sidebar) items in this list are - page's title: file.md theme: material you can also use readthedocs or install any other markdown_extensions: is a list of extensions to use. they are listed here - admonition allows for reStructuredText-style admonition, that is the \"important\", \"note\" and \"danger\" colored boxes","title":"Home Documentation: mkdocs"},{"location":"help/How_To_Use_Mkinx/#useful-resources","text":"Mkdocs's Getting Started Material for Mkdocs's customization instructions Material for Mkdocs's supported extensions list","title":"Useful Resources"},{"location":"help/How_To_Use_Mkinx/#projects-documentations-sphinx","text":"In all python projects' source/ directory are the source files for sphinx to generate your documentation. As for the Home Documentation you should explore the conf.py file in this source directory to set this particular project's configuration.","title":"Projects' Documentations: sphinx"},{"location":"help/Writing_Sphinx_Documentation/","text":"Writing Sphinx Documentation \u00b6 In this section we'll see how to generate documentation from docstrings. This tutorial is going to show you how to write files so that Sphinx's autodoc reads the relevant source code and generates the documentation from the docstrings. Note You may use any other Sphinx module/package/functionality as long as make html works and the built code is in your_project/build . Initialize the project's docs \u00b6 Important File structure should look like this: your_home_documentation/ mkdocs.yml docs/ index.md ... site/ your_project_1/ build/ # sphinx's build directory source/ # sphinx's documentation source directory your_package_1_1/ your_package_1_2/ ... your_project_2/ your_package_2_1/ your_package_2_2/ ... ... Say your project is called your_project_2 -> make it a Sphinx project with: cd your_home_documentation/your_project_2 sphinx-quickstart ./ say yes to > Separate source and build directories (y/n) , keep default for the next one, fill in the Project's name, author and release then keep defaults for everything until you say yes to > autodoc: automatically insert [...] and then you can keep defaults until the end (you may want to say no to the creation of a Windows executable) Copy your project in there, alongside source and build Ok so now you have a new build directory, a new source directory and a new Makefile . Note To (manually) build the documentation from the docstrings run make html from the project's root. You can also just use mkinx build as explained here . But before that, let's configure a couple things: Edit conf.py \u00b6 In the source directory, edit the conf.py file as follows: uncomment lines 15 to 17 and add sys.path.insert(0, os.path.abspath('..')) . This allows for two things: future documentation files ( .rst files in the source directory) will be in conf.py 's scope ( abspath('.') ) and so will packages alongside it's parent folder ( i.e. your project's code) ( abspath('..') ): import os import sys sys . path . insert ( 0 , os . path . abspath ( '.' )) sys . path . insert ( 0 , os . path . abspath ( '..' )) In order to understand Google Style docstrings, sphinx needs an extension. Add 'sphinx.ext.napoleon' to the extensions list (around line 42) Change the theme to Read The Docs's template: html_theme = 'sphinx_rtd_theme' (around line 80) That's it! Notice that you can change the author , version , realease and project values in this file. Generate the Documentation \u00b6 Sphinx's autodoc will do most of the work but you still have to do some of it. Basically you'll write the skeletton of each package's doc and list those in the index file. Pretty easy! index \u00b6 In the index.rst file generated by sphinx-quickstart you'll list the packages that need to be documented: .. toctree :: :maxdepth: 2 :caption: Contents: matching classif datasets Important Notice that there is a mandatory blank line and that there are exactly 3 spaces on the left. The above code lists 3 files which should be alongside index.rst : matching.rst , classif.rst and datasets.rst . Package documentation \u00b6 Now one of these files, documenting the package datasets , may look like this ( datasets.rst ): ************************* ``classif`` Documentation ************************* Here is the autodocumentation of a package. You may write anything you like as in Markdown Inference ========= .. automodule:: classif.inference :members: Models ====== .. automodule:: classif.models :members: *** are for title 1, === for title 2 and so on, have a look at some .rst cheatsheet Basically this file says: put some titles (\"classif Documentation\", \"Inference\", \"Models\") and generate the documentations ( .. automodule:: ) for the modules classif.inference and classif.models . These automodule are used by autodoc which is run by mkinx using make html in your project. Docstrings \u00b6 IDEs like Visual Code or PyCharm have plugins to automatically generate docstrings. For instance, Visual Code with the Python Docstring extension would do this: From def f ( a , b = None ): return a + b if b else a It would generate def f ( a , b = None ): \"\"\"[summary] Args: a ([type]): [description] b ([type], optional): Defaults to None. [description] Returns: [type]: [description] \"\"\" return a + b if b else a Otherwise, here is an example Google style docstring: def function_with_types_in_docstring ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. \"\"\" def function_with_pep484_type_annotations ( param1 : int , param2 : str ) -> bool : \"\"\"Example function with PEP 484 type annotations. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Args: param1: The first parameter. param2: The second parameter. Returns: The return value. True for success, False otherwise. \"\"\"","title":"Writing Sphinx Documentation"},{"location":"help/Writing_Sphinx_Documentation/#writing-sphinx-documentation","text":"In this section we'll see how to generate documentation from docstrings. This tutorial is going to show you how to write files so that Sphinx's autodoc reads the relevant source code and generates the documentation from the docstrings. Note You may use any other Sphinx module/package/functionality as long as make html works and the built code is in your_project/build .","title":"Writing Sphinx Documentation"},{"location":"help/Writing_Sphinx_Documentation/#initialize-the-projects-docs","text":"Important File structure should look like this: your_home_documentation/ mkdocs.yml docs/ index.md ... site/ your_project_1/ build/ # sphinx's build directory source/ # sphinx's documentation source directory your_package_1_1/ your_package_1_2/ ... your_project_2/ your_package_2_1/ your_package_2_2/ ... ... Say your project is called your_project_2 -> make it a Sphinx project with: cd your_home_documentation/your_project_2 sphinx-quickstart ./ say yes to > Separate source and build directories (y/n) , keep default for the next one, fill in the Project's name, author and release then keep defaults for everything until you say yes to > autodoc: automatically insert [...] and then you can keep defaults until the end (you may want to say no to the creation of a Windows executable) Copy your project in there, alongside source and build Ok so now you have a new build directory, a new source directory and a new Makefile . Note To (manually) build the documentation from the docstrings run make html from the project's root. You can also just use mkinx build as explained here . But before that, let's configure a couple things:","title":"Initialize the project's docs"},{"location":"help/Writing_Sphinx_Documentation/#edit-confpy","text":"In the source directory, edit the conf.py file as follows: uncomment lines 15 to 17 and add sys.path.insert(0, os.path.abspath('..')) . This allows for two things: future documentation files ( .rst files in the source directory) will be in conf.py 's scope ( abspath('.') ) and so will packages alongside it's parent folder ( i.e. your project's code) ( abspath('..') ): import os import sys sys . path . insert ( 0 , os . path . abspath ( '.' )) sys . path . insert ( 0 , os . path . abspath ( '..' )) In order to understand Google Style docstrings, sphinx needs an extension. Add 'sphinx.ext.napoleon' to the extensions list (around line 42) Change the theme to Read The Docs's template: html_theme = 'sphinx_rtd_theme' (around line 80) That's it! Notice that you can change the author , version , realease and project values in this file.","title":"Edit conf.py"},{"location":"help/Writing_Sphinx_Documentation/#generate-the-documentation","text":"Sphinx's autodoc will do most of the work but you still have to do some of it. Basically you'll write the skeletton of each package's doc and list those in the index file. Pretty easy!","title":"Generate the Documentation"},{"location":"help/Writing_Sphinx_Documentation/#index","text":"In the index.rst file generated by sphinx-quickstart you'll list the packages that need to be documented: .. toctree :: :maxdepth: 2 :caption: Contents: matching classif datasets Important Notice that there is a mandatory blank line and that there are exactly 3 spaces on the left. The above code lists 3 files which should be alongside index.rst : matching.rst , classif.rst and datasets.rst .","title":"index"},{"location":"help/Writing_Sphinx_Documentation/#package-documentation","text":"Now one of these files, documenting the package datasets , may look like this ( datasets.rst ): ************************* ``classif`` Documentation ************************* Here is the autodocumentation of a package. You may write anything you like as in Markdown Inference ========= .. automodule:: classif.inference :members: Models ====== .. automodule:: classif.models :members: *** are for title 1, === for title 2 and so on, have a look at some .rst cheatsheet Basically this file says: put some titles (\"classif Documentation\", \"Inference\", \"Models\") and generate the documentations ( .. automodule:: ) for the modules classif.inference and classif.models . These automodule are used by autodoc which is run by mkinx using make html in your project.","title":"Package documentation"},{"location":"help/Writing_Sphinx_Documentation/#docstrings","text":"IDEs like Visual Code or PyCharm have plugins to automatically generate docstrings. For instance, Visual Code with the Python Docstring extension would do this: From def f ( a , b = None ): return a + b if b else a It would generate def f ( a , b = None ): \"\"\"[summary] Args: a ([type]): [description] b ([type], optional): Defaults to None. [description] Returns: [type]: [description] \"\"\" return a + b if b else a Otherwise, here is an example Google style docstring: def function_with_types_in_docstring ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. \"\"\" def function_with_pep484_type_annotations ( param1 : int , param2 : str ) -> bool : \"\"\"Example function with PEP 484 type annotations. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Args: param1: The first parameter. param2: The second parameter. Returns: The return value. True for success, False otherwise. \"\"\"","title":"Docstrings"}]}